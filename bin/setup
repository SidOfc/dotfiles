#!/usr/bin/env ruby

require 'fileutils'
require 'colorize'

# source directory (this repo)
SOURCE    = File.expand_path File.join(__dir__, '../')

# destination directories
HOME      = File.expand_path '~'
CONFIG    = File.join HOME, '.config'
BIN       = File.join HOME, 'bin'
FISH      = File.join CONFIG, 'fish'
NVIM      = File.join CONFIG, 'nvim'
ALACRITTY = File.join CONFIG, 'alacritty'

# source files
GITIGNORE      = File.join SOURCE, '.gitignore'
GITCONFIG      = File.join SOURCE, '.gitconfig'
RGIGNORE       = File.join SOURCE, '.rgignore'
TMUX_CONF      = File.join SOURCE, '.tmux.conf'
ASDFRC         = File.join SOURCE, '.asdfrc'
DEFAULT_GEMS   = File.join SOURCE, '.default-gems'
FISH_CONFIG    = File.join SOURCE, '.config', 'fish', 'config.fish'
FISH_FUNCTIONS = File.join SOURCE, '.config', 'fish', 'functions'
NVIM_CONFIG    = File.join SOURCE, '.config', 'nvim', 'init.vim'
ALACRITTY_YML  = File.join SOURCE, '.config', 'alacritty', 'alacritty.yml'
BIN_CIU        = File.expand_path File.join(__dir__, 'ciu')
BIN_LPFMT      = File.expand_path File.join(__dir__, 'lpfmt')

# map source files to go into specific destination directories
# paths of keys and each array entry are absolute.
MAP = {
  HOME      => [GITIGNORE, GITCONFIG, RGIGNORE,
                TMUX_CONF, ASDFRC, DEFAULT_GEMS],
  BIN       => [BIN_CIU, BIN_LPFMT],
  FISH      => [FISH_CONFIG, FISH_FUNCTIONS],
  NVIM      => [NVIM_CONFIG],
  ALACRITTY => [ALACRITTY_YML]
}.freeze

# initialize destination ~/.config directories
FileUtils.mkdir_p BIN
FileUtils.mkdir_p FISH
FileUtils.mkdir_p NVIM
FileUtils.mkdir_p ALACRITTY

# loop through destination paths and targets
MAP.each do |(destination, targets)|
  # loop through each source file for destination
  targets.each do |source|
    # generate final destination
    target_dest = File.join destination, File.basename(source)

    # if target is already a present or a symlink,
    # or if the source doesn't exist, skip
    if File.symlink?(target_dest) ||
       File.exist?(target_dest) ||
       !File.exist?(source)
      puts '==>'.red + ' [SKIP] '.yellow + target_dest.magenta
    else
      system "ln -Fs #{source} #{target_dest}"
      puts '==>'.blue + ' [LINK] '.green + target_dest.magenta
    end
  end
end
